use std
use thread

pkg chan =
	type chan(@a) = union
		`Buf bchan(@a)#
		`Unbuf uchan(@a)#
	;;

	type err = union
		`Wblock
		`Closed
	;;

	type chaniter(@a) = chan(@a)

	type set = struct
		cases : case[:]
		sem : thread.sem
	;;

	type op = union
		`Send
		`Recv
		// `Noop // is this actually useful?
	;;

	generic mk : (cap : uint32 -> chan(@a))
	generic free : (c : chan(@a) -> void)
	generic dup : (c : chan(@a) -> chan(@a))
	generic close : (c : chan(@a) -> void)
	generic send : (c : chan(@a), msg : @a -> std.result(std.option(@a), err))
	generic recv : (c : chan(@a) -> std.result(std.option(@a), err))
	generic trysend : (c : chan(@a), msg : @a -> std.result(std.option(@a), err))
	generic tryrecv : (c : chan(@a) -> std.result(std.option(@a), err))
	generic forcesend : (c : chan(@a), msg : @a -> std.result(std.option(@a), err))

	// impl iterable chan(@a) -> @a

	impl iterable chaniter(@a) -> @a // XXX: workaround for above impl not working
	generic bymsg : (c : chan(@a) -> chaniter(@a))

	const mkset : (cap : uint32 -> set#)
	const setfree : (s : set# -> void)
	generic setadd : (s : set#, c : chan(@a), op : op, msg : @a# -> uint32)
	generic setrereg : (s : set#, id : uint32, op : op, msg : @a# -> void)
	const select : (s : set#, block : bool -> std.result(uint32, err))

	pkglocal generic bclose : (c : bchan(@a)# -> void)
	pkglocal generic uclose : (c : uchan(@a)# -> void)
	pkglocal generic btrysend : (c : bchan(@a)#, msg : @a -> std.result(std.option(@a), err))
	pkglocal generic utrysend : (c : uchan(@a)#, msg : @a -> std.result(std.option(@a), err))
	pkglocal generic btryrecv : (c : bchan(@a)# -> std.result(std.option(@a), err))
	pkglocal generic utryrecv : (c : uchan(@a)# -> std.result(std.option(@a), err))
	pkglocal generic bsend : (c : bchan(@a)#, msg : @a -> std.result(std.option(@a), err))
	pkglocal generic usend : (c : uchan(@a)#, msg : @a -> std.result(std.option(@a), err))
	pkglocal generic brecv : (c : bchan(@a)# -> std.result(std.option(@a), err))
	pkglocal generic urecv : (c : uchan(@a)# -> std.result(std.option(@a), err))

	pkglocal generic zallocslack : (sz : std.size -> @a#)
	pkglocal generic freeslack : (p : @a#, sz : std.size -> void)
	pkglocal const bwqpush : \
		(wq : bwaiter##, sem : thread.sem#, selinfo : std.option(selinfo) -> bwaiter#)
	pkglocal generic uwqpush : \
		(wq : uwaiter(@a)##, sem : thread.sem#, selinfo : std.option(selinfo), msg : @a# \
		-> uwaiter(@a)#)
	pkglocal const bwqshift : (wq : bwaiter## -> std.option(bwaiter#))
	pkglocal generic uwqshift : (wq : uwaiter(@a)## -> std.option(uwaiter(@a)#))
	pkglocal const bwqremove : (wq : bwaiter##, w : bwaiter# -> bool)
	pkglocal generic uwqremove : (wq : uwaiter(@a)##, w : uwaiter(@a)# -> bool)
	pkglocal const bwqunblock : (wq : bwaiter##, lock : thread.mutex# -> void)
	pkglocal generic uwqunblock : (wq :uwaiter(@a)##, lock : thread.mutex# -> void)

	pkglocal generic gentry : (c : chan(@a), op : op, msg : @a# -> (-> bool))
	pkglocal generic genclosed : (c : chan(@a) -> (-> bool))
	pkglocal generic genlock : (c : chan(@a) -> (-> void))
	pkglocal generic genunlock : (c : chan(@a) -> (-> void))
	pkglocal generic genready : (c : chan(@a), op : op -> (-> bool))
	pkglocal generic genwqpush : \
		(s : set#, c : chan(@a), id : uint32, op : op, msg : @a# \
		-> (state : uint32# -> (-> bool)))
	pkglocal generic genrereg : \
		(s : set#, c : chan(@a) -> (id : uint32, op : op, msg : void# -> void))
;;

type cell(@a) = struct
	lap : uint32
	msg : @a
;;

type bchan(@a) = struct
	write : uint64
	cap : uint32
	refc : uint32
	recvq : bwaiter#
	pad : byte[48 - sizeof(bwaiter#)]
	read : uint64
	sendq : bwaiter#
	lock : thread.mutex
	pad1 : byte[56 - sizeof(bwaiter#) - sizeof(thread.mutex)]
	buf : cell(@a)[...]
;;

type uchan(@a) = struct
	sendq : uwaiter(@a)#
	recvq : uwaiter(@a)#
	lock : thread.mutex
	refc : uint32
;;

type selinfo = struct
	state : uint32#
	id : uint32
;;

type bwaiter = struct
	prev : std.option(bwaiter#)
	next : std.option(bwaiter#)
	sem : thread.sem#
	selinfo : std.option(selinfo)
;;

type uwaiter(@a) = struct
	prev : std.option(uwaiter(@a)#)
	next : std.option(uwaiter(@a)#)
	sem : thread.sem#
	selinfo : std.option(selinfo)
	closed : bool
	msg : @a#
;;

type case = struct
	try : (-> bool)
	closed : (-> bool)
	lock : (-> void)
	unlock : (-> void)
	ready : (-> bool)
	wqpush : (state : uint32# -> (-> bool))
	wqremove : std.option((-> bool))
	done : (-> bool)
	rereg : (id : uint32, op : op, msg : void# -> void) // kind of dangerous idk
;;

const Selmagic = 0xffffffff
const Selnil = 0xfffffffe

generic mk = {cap
	if cap == 0
		-> `Unbuf std.mk([.refc = 1, .lock = thread.mkmtx()])
	;;
	var c = zallocslack((cap : std.size) * sizeof(cell(@a)))
	c# = [.cap = cap, .refc = 1, .read = 1 << 32, .lock = thread.mkmtx()]
	-> `Buf c
}

generic free = {c
	match c
	| `Buf b: freeslack(b, (b.cap : std.size) * sizeof(cell(@a)))
	| `Unbuf u: std.free(u)
	;;
}

generic dup = {c
	match c
	| `Buf b:
		std.assert(thread.xadd(&b.refc, 1) != 0,
			"error: attempted to dup a closed channel")
	| `Unbuf u:
		std.assert(thread.xadd(&u.refc, 1) != 0,
			"error: attempted to dup a closed channel")
	;;
	-> c
}

generic bclose = {c
	var refc = thread.xadd(&c.refc, -1)
	if refc != 1
		std.assert(refc != 0, "error: attempted to close a closed channel")
		-> void
	;;

	var w
	thread.mtxlock(&c.lock)
	while std.canget((w = bwqshift(&c.sendq)))
		thread.sempost(std.get(w).sem)
	;;
	while std.canget((w = bwqshift(&c.recvq)))
		thread.sempost(std.get(w).sem)
	;;
	thread.mtxunlock(&c.lock)
}

generic uclose = {c
	var refc = thread.xadd(&c.refc, -1)
	if refc != 1
		std.assert(refc != 0, "error: attempted to close a closed channel")
		-> void
	;;

	thread.mtxlock(&c.lock)
	for q : [&c.sendq, &c.recvq][:]
		for ; ;
			match uwqshift(q)
			| `std.None: break
			| `std.Some w:
				w.closed = true
				thread.sempost(w.sem)
			;;
		;;
	;;
	thread.mtxunlock(&c.lock)
}

generic close = {c
	match c
	| `Buf b: bclose(b)
	| `Unbuf u: uclose(u)
	;;
}

generic btrysend = {c, msg
	for ; ;
		if thread.xget(&c.refc) == 0
			-> `std.Err `Closed
		;;

		var write = thread.xget(&c.write)
		var idx = (write : uint32)
		var lap = (write >> 32 : uint32)
		if lap != thread.xget(&c.buf[idx].lap)
			-> `std.Err `Wblock
		;;

		var write1 = idx + 1 < c.cap ? write + 1 : ((lap + 2 : uint64) << 32)
		if thread.xcas(&c.write, write, write1) == write
			c.buf[idx].msg = msg
			thread.xset(&c.buf[idx].lap, lap + 1)
			bwqunblock(&c.recvq, &c.lock)
			-> `std.Ok `std.None
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic utrysend = {c, msg
	for ; ;
		if thread.xget(&c.refc) == 0
			-> `std.Err `Closed
		;;
		if !std.canget(thread.xgetptr(&c.recvq))
			-> `std.Err `Wblock
		;;

		thread.mtxlock(&c.lock)
		if thread.xget(&c.refc) == 0
			thread.mtxunlock(&c.lock)
			-> `std.Err `Closed
		;;
		var p = uwqshift(&c.recvq)
		thread.mtxunlock(&c.lock)

		match p
		| `std.None: -> `std.Err `Wblock
		| `std.Some w:
			match w.selinfo
			| `std.Some s:
				if thread.xcas(s.state, Selmagic, s.id) != Selmagic
					continue
				;;
			| `std.None:
			;;
			w.msg# = msg
			thread.sempost(w.sem)
			-> `std.Ok `std.None
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic trysend = {c, msg
	match c
	| `Buf b: -> btrysend(b, msg)
	| `Unbuf u: -> utrysend(u, msg)
	;;
}

generic btryrecv = {c
	for ; ;
		var read = thread.xget(&c.read)
		var idx = (read : uint32)
		var lap = (read >> 32 : uint32)
		if lap != thread.xget(&c.buf[idx].lap)
			if thread.xget(&c.refc) == 0
				-> `std.Err `Closed
			;;
			-> `std.Err `Wblock
		;;

		var read1 = idx + 1 < c.cap ? read + 1 : ((lap + 2 : uint64) << 32)
		if thread.xcas(&c.read, read, read1) == read
			var msg = c.buf[idx].msg
			thread.xset(&c.buf[idx].lap, lap + 1)
			bwqunblock(&c.sendq, &c.lock)
			-> `std.Ok `std.Some msg
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic utryrecv = {c
	for ; ;
		if thread.xget(&c.refc) == 0
			-> `std.Err `Closed
		;;
		if !std.canget(thread.xgetptr(&c.sendq))
			-> `std.Err `Wblock
		;;

		thread.mtxlock(&c.lock)
		if thread.xget(&c.refc) == 0
			thread.mtxunlock(&c.lock)
			-> `std.Err `Closed
		;;
		var p = uwqshift(&c.sendq)
		thread.mtxunlock(&c.lock)

		match p
		| `std.None: -> `std.Err `Wblock
		| `std.Some w:
			match w.selinfo
			| `std.Some s:
				if thread.xcas(s.state, Selmagic, s.id) != Selmagic
					continue
				;;
			| `std.None:
			;;
			var msg = w.msg#
			thread.sempost(w.sem)
			-> `std.Ok `std.Some msg
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic tryrecv = {c
	match c
	| `Buf b: -> btryrecv(b)
	| `Unbuf u: -> utryrecv(u)
	;;
}

generic bsend = {c, msg
	for ; ;
		match btrysend(c, msg)
		| `std.Ok o: -> `std.Ok o
		| `std.Err `Closed: -> `std.Err `Closed
		| _:
		;;

		var s
		thread.mtxlock(&c.lock)
		if thread.xget(&c.refc) == 0
			thread.mtxunlock(&c.lock)
			-> `std.Err `Closed
		;;
		var w = bwqpush(&c.sendq, &s, `std.None)
		var write = thread.xget(&c.write)
		if (write >> 32 : uint32) == thread.xget(&c.buf[(write : uint32)].lap)
			bwqremove(&c.sendq, w)
			thread.mtxunlock(&c.lock)
			std.free(w)
			continue
		;;

		s = thread.mksem(0)
		thread.mtxunlock(&c.lock)
		thread.semwait(&s)
		std.free(w)
	;;
	-> `std.Err `Closed // unreachable
}

generic usend = {c, msg
	for ; ;
		if thread.xget(&c.refc) == 0
			-> `std.Err `Closed
		;;

		thread.mtxlock(&c.lock)
		if thread.xget(&c.refc) == 0
			thread.mtxunlock(&c.lock)
			-> `std.Err `Closed
		;;

		match uwqshift(&c.recvq)
		| `std.Some w:
			thread.mtxunlock(&c.lock)
			match w.selinfo
			| `std.Some s:
				if thread.xcas(s.state, Selmagic, s.id) != Selmagic
					continue
				;;
			| `std.None:
			;;
			w.msg# = msg
			thread.sempost(w.sem)
			-> `std.Ok `std.None
		| `std.None:
			var s = thread.mksem(0)
			var w = uwqpush(&c.sendq, &s, `std.None, &msg)
			thread.mtxunlock(&c.lock)
			thread.semwait(&s)
			if w.closed
				std.free(w)
				-> `std.Err `Closed
			;;
			std.free(w)
			-> `std.Ok `std.None
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic send = {c, msg
	match c
	| `Buf b: -> bsend(b, msg)
	| `Unbuf u: -> usend(u, msg)
	;;
}

generic brecv = {c
	for ; ;
		match btryrecv(c)
		| `std.Ok o: -> `std.Ok o
		| `std.Err `Closed: -> `std.Err `Closed
		| _:
		;;

		var s
		thread.mtxlock(&c.lock)
		var w = bwqpush(&c.recvq, &s, `std.None)
		var read = thread.xget(&c.read)
		if (read >> 32 : uint32) == thread.xget(&c.buf[(read : uint32)].lap)
			bwqremove(&c.recvq, w)
			thread.mtxunlock(&c.lock)
			std.free(w)
			continue
		;;
		if thread.xget(&c.refc) == 0
			bwqremove(&c.recvq, w)
			thread.mtxunlock(&c.lock)
			std.free(w)
			-> `std.Err `Closed
		;;

		s = thread.mksem(0)
		thread.mtxunlock(&c.lock)
		thread.semwait(&s)
		std.free(w)
	;;
	-> `std.Err `Closed // unreachable
}

generic urecv = {c
	for ; ;
		if thread.xget(&c.refc) == 0
			-> `std.Err `Closed
		;;

		thread.mtxlock(&c.lock)
		if thread.xget(&c.refc) == 0
			thread.mtxunlock(&c.lock)
			-> `std.Err `Closed
		;;

		match uwqshift(&c.sendq)
		| `std.Some w:
			thread.mtxunlock(&c.lock)
			match w.selinfo
			| `std.Some s:
				if thread.xcas(s.state, Selmagic, s.id) != Selmagic
					continue
				;;
			| `std.None:
			;;
			var msg = w.msg#
			thread.sempost(w.sem)
			-> `std.Ok `std.Some msg
		| `std.None:
			var s = thread.mksem(0)
			var msg
			var w = uwqpush(&c.recvq, &s, `std.None, &msg)
			thread.mtxunlock(&c.lock)
			thread.semwait(&s)
			if w.closed
				std.free(w)
				-> `std.Err `Closed
			;;
			std.free(w)
			-> `std.Ok `std.Some msg
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic recv = {c
	match c
	| `Buf b: -> brecv(b)
	| `Unbuf u: -> urecv(u)
	;;
}

generic forcesend = {c, msg
	match c
	| `Unbuf u: std.die("error: attempted to forcesend to unbuffered channel\n")
	| `Buf b:
		var full = false
		for ; ;
			if thread.xget(&b.refc) == 0
				-> `std.Err `Closed
			;;

			var write = thread.xget(&b.write)
			var idx = (write : uint32)
			var lap = (write >> 32 : uint32)
			if lap != thread.xget(&b.buf[idx].lap)
				full = true
				var read = thread.xget(&b.read)
				var ridx = (read : uint32)
				var rlap = (read >> 32 : uint32)
				if rlap != thread.xget(&b.buf[idx].lap)
					continue
				;;

				var read1 = ridx + 1 < b.cap ? \
					read + 1 : ((rlap + 2 : uint64) << 32)
				if thread.xcas(&b.read, read, read1) == read
					thread.xset(&b.buf[ridx].lap, rlap + 1)
				;;
				continue
			;;

			var write1 = idx + 1 < b.cap ? write + 1 : ((lap + 2 : uint64) << 32)
			if thread.xcas(&b.write, write, write1) == write
				b.buf[idx].msg = msg
				thread.xset(&b.buf[idx].lap, lap + 1)
				bwqunblock(&b.recvq, &b.lock)
				-> full ? `std.Err `Wblock : `std.Ok `std.None // questionable
			;;
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic bymsg = {c
	-> (c : chaniter(@a))
}

impl iterable chaniter(@a) -> @a =
	__iternext__ = {itp : chaniter(@a)#, valp
		match chan.recv((itp# : chan(@a)))
		| `std.Ok `std.Some msg :
			valp# = msg
			-> true
		| _: -> false
		;;
	}

	__iterfin__ = {itp : chaniter(@a)#, valp : @a# -> void
	}
;;

/*
impl iterable chan(@a) -> @a =
	__iternext__ = {itp : chan(@a)#, valp
		match chan.recv(itp#)
		| `std.Ok `std.Some msg :
			valp# = msg
			-> true
		| _: -> false
		;;
	}

	__iterfin__ = {itp, valp
	}
;;
*/

const mkset = {cap
	-> std.mk([
		// .cases = std.slalloc((cap : std.size)), // TODO: prealloc, etc.
		.sem = thread.mksem(0),
	])
}

const setfree = {s
	for c : s.cases
		std.fnfree(c.try)
		std.fnfree(c.closed)
		std.fnfree(c.lock)
		std.fnfree(c.unlock)
		std.fnfree(c.ready)
		std.fnfree(c.wqpush)
		std.fnfree(c.rereg)

		/* what am i doing lmao */
		if (c.done : void#) != (c.try : void#) || \
			(c.done : void#[2]#)#[1] != (c.try : void#[2]#)#[1]
			std.fnfree(c.done)
		;;
	;;

	std.slfree(s.cases)
	std.free(s)
}

generic setadd = {s, c, op, msg
	var try = gentry(c, op, msg)
	var done
	match c
	| `Buf _: done = try
	| `Unbuf _: done = {; -> true}
	;;

	s.cases = std.slpush(&s.cases, [
		.try = try,
		.closed = genclosed(c),
		.lock = genlock(c),
		.unlock = genunlock(c),
		.ready = genready(c, op),
		.wqpush = genwqpush(s, c, s.cases.len, op, msg),
		.wqremove = `std.None,
		.done = done,
		.rereg = genrereg(s, c),
	])
	-> s.cases.len - 1
}

generic setrereg = {s : set#, id : uint32, op : op, msg : @a# -> void
	s.cases[id].rereg(id, op, (msg : void#))
}

const select = {s, block
	var off = std.rand(0, s.cases.len)
	for ; ;
		for var i = 0; i < s.cases.len; i++
			if s.cases[(i + off) % s.cases.len].try()
				-> `std.Ok ((i + off) % s.cases.len : uint32)
			;;
		;;
		if !block
			-> `std.Err `Wblock
		;;

		var state : uint32 = Selmagic
		var closedc = 0
		for var i = 0; i < s.cases.len; i++
			var case = s.cases[(i + off) % s.cases.len]
			if case.closed()
				closedc++
				continue
			;;

			case.lock()
			case.wqremove = `std.Some case.wqpush(&state)
			if case.ready()
				std.get(case.wqremove)()
				case.unlock()
				std.fnfree(std.get(case.wqremove))
				case.wqremove = `std.None
				goto ready
			;;
			case.unlock()
		;;
		if closedc == s.cases.len
			-> `std.Err `Closed
		;;
		thread.semwait(&s.sem)

:ready
		thread.xcas(&state, Selmagic, Selnil)
		for var i = 0; i < s.cases.len; i++
			match s.cases[i].wqremove
			| `std.Some remfn:
				s.cases[i].lock()
				remfn()
				s.cases[i].unlock()
				std.fnfree(remfn)
				s.cases[i].wqremove = `std.None
			| `std.None:
			;;
		;;
		if state < Selnil && s.cases[state].done()
			-> `std.Ok state
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic zallocslack = {sz : std.size -> @a#
	-> (std.zbytealloc(sizeof(@a) + sz) : @a#)
}

generic freeslack = {p : @a#, sz : std.size -> void
	std.bytefree((p : byte#), sizeof(@a) + sz)
}

const bwqpush = {wq, sem, selinfo
	var w = std.mk([
		.next = `std.None,
		.sem = sem,
		.selinfo = selinfo,
	])

	match thread.xgetptr(wq)
	| `std.Some q:
		w.prev = q.prev
		std.get(w.prev).next = `std.Some w
		q.prev = `std.Some w
	| `std.None:
		w.prev = `std.Some w
		thread.xsetptr(wq, `std.Some w)
	;;
	-> w
}

generic uwqpush = {wq, sem, selinfo, msg
	var w = std.mk([
		.next = `std.None,
		.sem = sem,
		.selinfo = selinfo,
		.msg = msg
	])

	match thread.xgetptr(wq)
	| `std.Some q:
		w.prev = q.prev
		std.get(w.prev).next = `std.Some w
		q.prev = `std.Some w
	| `std.None:
		w.prev = `std.Some w
		thread.xsetptr(wq, `std.Some w)
	;;
	-> w
}

const bwqshift = {wq
	var p = thread.xgetptr(wq)
	match p
	| `std.Some w:
		match w.next
		| `std.Some next: next.prev = w.prev
		| _:
		;;
		w.prev = `std.None // for `wqremove`
		thread.xsetptr(wq, w.next)
	| `std.None:
	;;
	-> p
}

generic uwqshift = {wq
	var p = thread.xgetptr(wq)
	match p
	| `std.Some w:
		match w.next
		| `std.Some next: next.prev = w.prev
		| _:
		;;
		w.prev = `std.None // for `wqremove`
		thread.xsetptr(wq, w.next)
	| `std.None:
	;;
	-> p
}

const bwqremove = {wq, w
	match w.prev
	| `std.None: -> false
	| `std.Some prev:
		if prev == w
			thread.xsetptr(wq, `std.None)
		else
			prev.next = w.next
			match w.next
			| `std.Some next: next.prev = w.prev
			| `std.None: std.get(thread.xgetptr(wq)).prev = w.prev
			;;
		;;
		-> true
	;;
}

generic uwqremove = {wq, w
	match w.prev
	| `std.None: -> false
	| `std.Some prev:
		if prev == w
			thread.xsetptr(wq, `std.None)
		else
			prev.next = w.next
			match w.next
			| `std.Some next: next.prev = w.prev
			| `std.None: std.get(thread.xgetptr(wq)).prev = w.prev
			;;
		;;
		-> true
	;;
}

const bwqunblock = {wq, lock
	for ; ;
		if std.canget(thread.xgetptr(wq))
			thread.mtxlock(lock)
			var p = bwqshift(wq)
			thread.mtxunlock(lock)
			match p
			| `std.Some w:
				match w.selinfo
				| `std.Some s:
					if thread.xcas(s.state, Selmagic, s.id) != Selmagic
						continue
					;;
				| `std.None:
				;;
				thread.sempost(w.sem)
			| _:
			;;
		;;
		-> void
	;;
}

generic uwqunblock = {wq, lock
	for ; ;
		if std.canget(thread.xgetptr(wq))
			thread.mtxlock(lock)
			var p = uwqshift(wq)
			thread.mtxunlock(lock)
			match p
			| `std.Some w:
				match w.selinfo
				| `std.Some s:
					if thread.xcas(s.state, Selmagic, s.id) != Selmagic
						continue
					;;
				| `std.None:
				;;
				thread.sempost(w.sem)
			| _:
			;;
		;;
		-> void
	;;
}

generic gentry = {c, op, msg
	match op
	| `Send: -> std.fndup({
			match trysend(c, msg#)
			| `std.Ok _: -> true
			| _ : -> false
			;;
		})
	| `Recv: -> std.fndup({
			match tryrecv(c)
			| `std.Ok `std.Some m:
				msg# = m
				-> true
			| _ : -> false
			;;
		})
	;;
}

generic genclosed = {c
	match c
	| `Buf b:
		-> std.fndup({
			-> thread.xget(&b.refc) == 0
		})
	| `Unbuf u:
		-> std.fndup({
			-> thread.xget(&u.refc) == 0
		})
	;;
}

generic genlock = {c
	match c
	| `Buf b:
		-> std.fndup({
			thread.mtxlock(&b.lock)
		})
	| `Unbuf u:
		-> std.fndup({
			thread.mtxlock(&u.lock)
		})
	;;
}

generic genunlock = {c
	match c
	| `Buf b:
		-> std.fndup({
			thread.mtxunlock(&b.lock)
		})
	| `Unbuf u:
		-> std.fndup({
			thread.mtxunlock(&u.lock)
		})
	;;
}

generic genready = {c, op
	match c
	| `Buf b:
		var un
		match op
		| `Send: un = &b.write
		| `Recv: un = &b.read
		;;

		-> std.fndup({
			var u = thread.xget(un)
			var lap = (u >> 32 : uint32)
			-> (u >> 32 : uint32) == thread.xget(&b.buf[(u : uint32)].lap)
		})
	| `Unbuf u:
		var wq
		match op
		| `Send: wq = &u.recvq
		| `Recv: wq = &u.sendq
		;;

		-> std.fndup({
			-> std.canget(thread.xgetptr(wq))
		})
	;;
}

generic genwqpush = {s, c, id, op, msg
	match c
	| `Buf b:
		var wq
		match op
		| `Send: wq = &b.sendq
		| `Recv: wq = &b.recvq
		;;

		var sp = s // XXX: workaround for ptr not being captured properly
		// std.put("a: {}\n", s)
		-> std.fndup({state : uint32#
			// std.put("b: {}\n", s)
			var w = bwqpush(wq, &sp.sem, `std.Some [.state = state, .id = id])
			-> std.fndup({
				var rem = bwqremove(wq, w)
				std.free(w)
				-> rem
			})
		})
	| `Unbuf u:
		var wq
		match op
		| `Send: wq = &u.sendq
		| `Recv: wq = &u.recvq
		;;

		var sp = s
		-> std.fndup({state : uint32#
			var w = uwqpush(wq, &sp.sem, `std.Some [.state = state, .id = id], msg)
			-> std.fndup({
				var rem = uwqremove(wq, w)
				std.free(w)
				-> rem
			})
		})
	;;
}

generic genrereg = {s, c
	match c
	| `Buf b:
		-> std.fndup({id, op, msg
			std.fnfree(s.cases[id].try)
			std.fnfree(s.cases[id].ready)
			std.fnfree(s.cases[id].wqpush)
			s.cases[id].try = gentry(c, op, (msg : @a#))
			s.cases[id].ready = genready(c, op)
			s.cases[id].wqpush = genwqpush(s, c, id, op, (msg : @a#))
			s.cases[id].done = s.cases[id].try
		})
	| `Unbuf u:
		-> std.fndup({id, op, msg
			std.fnfree(s.cases[id].try)
			std.fnfree(s.cases[id].ready)
			std.fnfree(s.cases[id].wqpush)
			s.cases[id].try = gentry(c, op, (msg : @a#))
			s.cases[id].ready = genready(c, op)
			s.cases[id].wqpush = genwqpush(s, c, id, op, (msg : @a#))
		})
	;;
}
