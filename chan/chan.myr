use std
use thread
use "sem"

pkg chan =
	type chan(@a) = struct
		cap : uint32
		refc : uint32
		sendq : waiter#
		recvq : waiter#
		write : uint64
		read : uint64
		lock : thread.mutex // move this when adding unbuf channels
		buf : cell(@a)[...]
	;;

	type err = union
		`Wblock
		`Closed
	;;

	type chaniter(@a) = chan(@a)#

	generic make : (cap : uint32 -> chan(@a)#)
	generic drop : (c : chan(@a)# -> void)
	generic dup : (c : chan(@a)# -> chan(@a)#)
	generic close : (c : chan(@a)# -> void)
	generic send : (c : chan(@a)#, \
		msg : @a -> std.result(std.option(@a), err))
	generic recv : (c : chan(@a)# -> std.result(std.option(@a), err))
	generic trysend : (c : chan(@a)#, \
		msg : @a -> std.result(std.option(@a), err))
	generic tryrecv : (c : chan(@a)# -> std.result(std.option(@a), err))
	generic bymsg : (c : chan(@a)# -> chaniter(@a))

	impl iterable chaniter(@a) -> @a

	/* these seem to only be necessary when linking? */
	pkglocal generic zallocslack : (sz : std.size -> @a#)
	pkglocal const wqpush : (wq : waiter##, \
		sem : sem.sem#, \
		selinfo : std.option(selinfo) -> waiter#)
	/* and why aren't these needed?
	pkglocal generic freeslack : (p : @a#, sz : std.size -> void)
	pkglocal const wqunblock : (wq : waiter##, \
		lock : thread.mutex# -> void)
	pkglocal const wqremove : (wq : waiter##, w : waiter# -> bool)
	*/
;;

type cell(@a) = struct
	lap : uint32
	msg : @a
;;

type selinfo = struct
	state : std.option(uint32#)
	id : std.option(uint32)
;;

type waiter = struct
	prev : std.option(waiter#)
	next : std.option(waiter#)
	sem : sem.sem#
	selinfo : std.option(selinfo)
;;

generic zallocslack = {sz : std.size -> @a#
	-> (std.zbytealloc(sizeof(@a) + sz) : @a#)
}

generic make = {cap : uint32 -> chan(@a)#
	var c = zallocslack((cap : std.size) * sizeof(cell(@a)))
	c# = [.cap = cap, .refc = 1, .read = 1 << 32]
	-> c
}

generic freeslack = {p : @a#, sz : std.size -> void
	std.bytefree((p : byte#), sizeof(@a) + sz)
}

generic drop = {c : chan(@a)# -> void
	freeslack(c, (c.cap : std.size) * sizeof(cell(@a)))
}

generic dup = {c : chan(@a)# -> chan(@a)#
	thread.xadd(&c.refc, 1)
	-> c
}

generic close = {c : chan(@a)# -> void
	thread.xadd(&c.refc, -1)
}

const wqpush = {wq : waiter##, \
		sem : sem.sem#, \
		selinfo : std.option(selinfo) -> waiter#
	var w : waiter# = std.mk([
		.next = `std.None,
		.sem = sem,
		.selinfo = selinfo,
	])

	match thread.xgetptr(wq)
	| `std.Some q:
		w.prev = q.prev
		std.get(w.prev).next = `std.Some w
		q.prev = `std.Some w
	| `std.None:
		w.prev = `std.Some w
		thread.xsetptr(wq, `std.Some w)
	;;
	-> w
}

const wqshift = {wq : waiter## -> std.option(waiter#)
	var w = thread.xgetptr(wq)
	match w
	| `std.Some w1:
		match w1.next
		| `std.Some next: next.prev = w1.prev
		| _:
		;;
		w1.prev = `std.None // for `wqremove`
		thread.xsetptr(wq, w1.next)
	| _:
	;;
	-> w
}

const wqremove = {wq : waiter##, w : waiter# -> bool
	match w.prev
	| `std.None: -> false
	| `std.Some prev:
		if prev == w
			thread.xsetptr(wq, `std.None)
		else
			prev.next = w.next
			match w.next
			| `std.Some next: next.prev = w.prev
			| `std.None: std.get(thread.xgetptr(wq)).prev = w.prev
			;;
		;;
		-> true
	;;
}

const wqunblock = {wq : waiter##, lock : thread.mutex# -> void
	thread.mtxlock(lock)
	var w = thread.xgetptr(wq)
	thread.mtxunlock(lock)
	match w
	| `std.Some _:
		match wqshift(wq)
		| `std.Some w1: sem.post(w1.sem)
		| _:
		;;
	| _:
	;;
}

generic trysend = {c : chan(@a)#, msg : @a -> std.result(std.option(@a), err)
	for ; ;
		if thread.xget(&c.refc) == 0
			-> `std.Err `Closed
		;;

		var write = thread.xget(&c.write)
		var index = (write : uint32)
		var lap = (write >> 32 : uint32)
		if lap != thread.xget(&c.buf[index].lap)
			-> `std.Err `Wblock
		;;

		var write1 = index + 1 < c.cap ? \
				write + 1 : ((lap + 2 : uint64) << 32)
		if thread.xcas(&c.write, write, write1) == write
			c.buf[index].msg = msg
			thread.xset(&c.buf[index].lap, lap + 1)
			wqunblock(&c.recvq, &c.lock)
			-> `std.Ok `std.None
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic tryrecv = {c : chan(@a)# -> std.result(std.option(@a), err)
	for ; ;
		var read = thread.xget(&c.read)
		var index = (read : uint32)
		var lap = (read >> 32 : uint32)
		if lap != thread.xget(&c.buf[index].lap)
			if thread.xget(&c.refc) == 0
				-> `std.Err `Closed
			;;
			continue
		;;

		var read1 = index + 1 < c.cap ? \
				read + 1 : ((lap + 2 : uint64) << 32)
		if thread.xcas(&c.read, read, read1) == read
			var msg = c.buf[index].msg
			thread.xset(&c.buf[index].lap, lap + 1)
			wqunblock(&c.recvq, &c.lock)
			-> `std.Ok `std.Some msg
		;;
	;;
	-> `std.Err `Closed // unreachable
}

generic send = {c : chan(@a)#, msg : @a -> std.result(std.option(@a), err)
	for ; ;
		match trysend(c, msg)
		| `std.Ok o: -> `std.Ok o
		| `std.Err `Closed: -> `std.Err `Closed
		| _: continue
		;;

		var s
		thread.mtxlock(&c.lock)
		if thread.xget(&c.refc) == 0
			thread.mtxunlock(&c.lock)
			-> `std.Err `Closed
		;;
		var w = wqpush(&c.sendq, &s, `std.None)
		var write = thread.xget(&c.write)
		var lap = (write >> 32 : uint32)
		if lap != thread.xget(&c.buf[(write : uint32)].lap)
			wqremove(&c.sendq, w)
			thread.mtxunlock(&c.lock)
			std.free(w)
			continue
		;;

		sem.init(&s, 0)
		thread.mtxunlock(&c.lock)
		sem.wait(&s)
		std.free(w)
	;;
	-> `std.Err `Closed // unreachable
}

generic recv = {c : chan(@a)# -> std.result(std.option(@a), err)
	for ; ;
		match tryrecv(c)
		| `std.Ok o: -> `std.Ok o
		| `std.Err `Closed: -> `std.Err `Closed
		| _: continue
		;;

		var s
		thread.mtxlock(&c.lock)
		var w = wqpush(&c.sendq, &s, `std.None)
		var read = thread.xget(&c.read)
		var lap = (read >> 32 : uint32)
		if lap != thread.xget(&c.buf[(read : uint32)].lap)
			wqremove(&c.sendq, w)
			thread.mtxunlock(&c.lock)
			std.free(w)
			continue
		;;
		if thread.xget(&c.refc) == 0
			wqremove(&c.sendq, w)
			thread.mtxunlock(&c.lock)
			std.free(w)
			-> `std.Err `Closed
		;;

		sem.init(&s, 0)
		thread.mtxunlock(&c.lock)
		sem.wait(&s)
		std.free(w)
	;;
	-> `std.Err `Closed // unreachable
}

generic bymsg = {c : chan(@a)#
	-> (c : chaniter(@a))
}

impl iterable chaniter(@a) -> @a =
	__iternext__ = {itp : chaniter(@a)#, valp : @a# -> bool
		match chan.recv((itp# : chan(@a)#))
		| `std.Ok `std.Some msg :
			valp# = msg
			-> true
		| _: -> false
		;;
	}

	__iterfin__ = {itp : chaniter(@a)#, valp : @a# -> void
	}
;;
