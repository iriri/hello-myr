use std
use thread

pkg sem =
	type sem = struct
		_val : uint32
	;;

	const init : (s : sem#, val : uint32 -> void)
	const wait : (s : sem# -> void)
	const trywait : (s : sem# -> bool)
	const post : (s : sem# -> void)
;;

const init = {s : sem#, val : uint32 -> void
	s._val = val
}

const wait = {s : sem# -> void
	for ; ;
		var val = ~0x0/* gives undeclared warning otherwise? */
		while (val = thread.xget(&s._val)) == 0 /* i love spinning! */
		;;
		if thread.xcas(&s._val, val, val - 1) == val
			break
		;;
	;;
}

const trywait = {s : sem# -> bool
	for ; ;
		var val = thread.xget(&s._val)
		if val == 0
			-> false
		;;
		if thread.xcas(&s._val, val, val - 1) == val
			-> true
		;;
	;;
	-> false /* unreachable */
}

const post = {s : sem# -> void
	thread.xadd(&s._val, -1) /* what's overflow? */
}
