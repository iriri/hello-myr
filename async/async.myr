use std
use thread

pkg async =
	type future(@a) = struct
		next  : (-> void)
		ready : thread.sem
		val   : @a
	;;

	generic do : (fn : (-> @a) -> future(@a)#)

	generic exec  : (fut : future(@a)# -> future(@a)#)
	generic force : (fut : future(@a)# -> future(@a)#)
	generic fire  : (fut : future(@a)# -> void)

	generic wait : (fut : future(@a)# -> @a)
	generic peek : (fut : future(@a)# -> std.option(@a))

	generic map    : (fut : future(@a)#, fn : (a : @a -> @b) -> future(@b)#)
	generic bind   : (fut : future(@a)#, fn : (a : @a -> future(@b)#) -> future(@b)#)
	generic return : (a : @a -> future(@a)#)
;;

generic do = {fn
	var fut = std.zalloc()
	thread.spawn({
		fut.val = fn()
		thread.sempost(&fut.ready)
	})
	-> fut
}

generic exec = {fut
	thread.spawn(fut.next)
	-> fut
}

generic force = {fut
	fut.next()
	-> fut
}

generic fire = {fut
	thread.spawn({
		fut.next()
		std.fnfree(fut.next)
		std.free(fut)
	})
}

generic wait = {fut
	thread.semwait(&fut.ready)
	-> fut.val
}

generic peek = {fut; -> thread.semtrywait(&fut.ready) ? `std.Some fut.val : `std.None}

generic map = {fut, fn
	var fut1 = std.zalloc()
	fut1.next = std.fndup({
		fut.next()
		thread.semwait(&fut.ready)

		var f = std.fndup({
			fut1.val = fn(fut.val)
			std.free(fut)
			thread.sempost(&fut1.ready)
		})
		f();
		std.fnfree(f)
	})
	-> fut1
}

generic bind = {fut, fn
	var fut1 = std.zalloc()
	fut1.next = std.fndup({
		fut.next()
		thread.semwait(&fut.ready)

		var f = std.fndup({
			fut1.val = wait(fn(fut.val))
			std.free(fut)
			thread.sempost(&fut1.ready)
		})
		f();
		std.fnfree(f)
	})
	-> fut1
}

generic return = {a
	-> std.mk([
		.next = {;},
		.ready = thread.mksem(1),
		.val = a,
	])
}
