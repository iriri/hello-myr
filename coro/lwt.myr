use std

pkg lwt =
	type lwt = struct
		rsp  : void#
		rbp  : void#
		rax  : void#
		rbx  : void#
		r12  : void#
		r13  : void#
		r14  : void#
		r15  : void#
		next : lwt#
		prev : lwt#
		sz   : std.size
		stk  : void#[...]
	;;

	const mk          : (fn : (-> void), stksz : std.size -> lwt#)
	const free        : (lwt : lwt# -> void)
	extern const swap : (src : lwt#, dst : lwt# -> void)

	pkglocal const _mk  : (fn : (-> void), stksz : std.size, diefn : (-> void) -> lwt#)
	pkglocal const ovfl : (-> void)
;;

const mk = {fn, stksz
	-> _mk(fn, stksz, ret)
}

const _mk = {fn, stksz, diefn
	var sz = (stksz + sizeof(lwt) + 0x40f) & ~0xf
	var lwt = (std.bytealloc(sz) : lwt#)
	var stklen = (sz - sizeof(lwt)) / sizeof(void#)

	lwt.rsp = (&lwt.stk[stklen - 2] : void#)
	lwt.rax = (&fn : void#[2]#)#[0]
	lwt.sz = sz
	lwt.stk[stklen - 2] = (&fn : void#[2]#)#[1]
	lwt.stk[stklen - 1] = (&diefn : void#[2]#)#[1]
	-> lwt
}

const free = {lwt
	std.bytefree((lwt : byte#), lwt.sz)
}

const ret = {
	std.die("a lwt's fn returned instead of cleaning itself up\n")
}

const ovfl = {
	std.die("a lwt's stack overflowed\n")
}
