use std
use thread

use "lwt"
use "tls"
use "types"

pkg lwt =
	const init   : (-> lwt#)
	const spawn  : (fn : (-> void) -> lwt#)
	const switch : (dst : lwt# -> void)
	const pass   : (-> void)
	const yield  : (-> void)
	const block  : (-> void)
	const curr   : (-> lwt#)

	pkglocal generic Zptr : @a# = (0 : @a#)

	pkglocal const done    : (-> void)
	pkglocal const reap    : (-> void)
	pkglocal const _switch : (hwt : hwt#, dst : lwt# -> void)
	pkglocal const push    : (hwt : hwt#, lwt : lwt# -> void)
	pkglocal const unshift : (hwt : hwt#, lwt : lwt# -> void)
	pkglocal const pop     : (hwt : hwt# -> std.option(lwt#))
	pkglocal const shift   : (hwt : hwt# -> std.option(lwt#))
;;

var hwts : struct
	head : hwt#
	tail : hwt#
	lock : thread.mutex
;;
var procs : thread.sem
var mainstk : lwt

const init = {
	var hwt = mkhwt()
	hwt.reaper = mk(reap, 256)
	hwt.state = Active
	/*
	var n = (thread.ncpu() - 1 : uint32)
	procs = thread.mksem(n)
	for var i = 0; i < n; i++
		thread.spawn({
			var hwt = mkhwt()
			hwt.reaper = mk(reap, 256)
			thread.mtxlock(&hwts.lock)
			match hwts.head
			| Zptr: hwts.head = hwts.tail = hwt
			| _:
				hwts.tail.next = hwt
				hwts.tail = hwt
			;;
			thread.mtxunlock(&hwts.lock)
			thread.ftxwait(&hwt.state, Parked, -1)
		})
	;;
	*/
	-> (hwt.curr = &mainstk)
}

const spawn = {fn
	var lwt = _mk(fn, 8192, done)
	/*
	if thread.trywait(&procs)
	;;
	*/
	switch(lwt)
	-> lwt
}

const switch = {dst
	_switch(gethwt(), dst)
}

const pass = {
	var hwt = gethwt()
	match pop(hwt)
	| `std.Some lwt: _switch(hwt, lwt)
	| `std.None: std.die("rip\n")
	;;
}

const yield = {
	var hwt = gethwt()
	match shift(hwt)
	| `std.Some lwt: _switch(hwt, lwt)
	| `std.None:
	;;
}

const block = {
	var hwt = gethwt()
	match shift(hwt)
	| `std.Some lwt:
		var prev = hwt.curr
		swap(prev, (hwt.curr = lwt))
	| `std.None: std.die("you deadlocked\n")
	;;
}

const curr = {
	-> gethwt().curr
}

const done = {
	switch(gethwt().reaper)
}

const reap = {
	var hwt = gethwt()
	for ; ;
		match pop(hwt)
		| `std.Some lwt: free(lwt)
		| `std.None: std.die("how\n")
		;;
		match shift(hwt)
		| `std.Some lwt: swap(hwt.reaper, (hwt.curr = lwt))
		| `std.None: std.exit(0)
		;;
	;;
}

const _switch = {hwt, dst
	var prev = hwt.curr
	push(hwt, prev)
	swap(prev, (hwt.curr = dst))
}

const push = {hwt, lwt
	lwt.next = Zptr
	match hwt.queue
	| Zptr:
		lwt.prev = lwt
		hwt.queue = lwt
	| q:
		lwt.prev = q.prev
		q.prev.next = lwt
		q.prev = lwt
	;;
}

const unshift = {hwt, lwt
	lwt.next = hwt.queue
	match hwt.queue
	| Zptr: lwt.prev = lwt
	| q:
		lwt.prev = q.prev
		q.prev = lwt
	;;
	hwt.queue = lwt
}

const pop = {hwt
	if hwt.queue == Zptr
		-> `std.None
	;;

	var lwt = hwt.queue.prev
	if lwt.prev == lwt
		hwt.queue = Zptr
	else
		hwt.queue.prev = lwt.prev
		lwt.prev.next = Zptr
	;;
	-> `std.Some lwt
}

const shift = {hwt
	if hwt.queue == Zptr
		-> `std.None
	;;

	var lwt = hwt.queue
	if lwt.next != Zptr
		lwt.next.prev = lwt.prev
	;;
	hwt.queue = lwt.next
	-> `std.Some lwt
}
