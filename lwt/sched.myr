use std

use "lwt"

pkg lwt =
	const init   : (-> lwt#)
	const spawn  : (fn : (-> void) -> lwt#)
	const switch : (dst : lwt# -> void)
	const pass   : (-> void)
	const yield  : (-> void)
	const done   : (-> void)

	pkglocal generic Zptr : @a# = (0 : @a#)

	pkglocal const reap  : (-> void)
	pkglocal const push  : (task : task# -> void)
	pkglocal const pop   : (-> std.option(lwt#))
	pkglocal const shift : (-> std.option(lwt#))
;;

type task = struct
	prev : task#
	next : task#
	lwt  : lwt#
;;

var sched : struct
	queue  : task#
	curr   : lwt#
	reaper : lwt#
;;

var mainstk : lwt[64]

const init = {
	sched.reaper = mk(reap, 512)
	sched.curr = &mainstk[0]
	-> (&mainstk[0])
}

const spawn = {fn
	var lwt = mk(std.fndup({ // TODO: free this
		pass()
		fn()
		done()
	}), 8192)
	switch(lwt)
	-> lwt
}

const switch = {dst
	var prev = sched.curr
	var t = [.lwt = prev]
	push(&t)
	swap(prev, (sched.curr = dst))
}

const pass = {
	match pop()
	| `std.Some lwt: switch(lwt)
	| `std.None: std.die("rip\n")
	;;
}

const yield = {
	match shift()
	| `std.Some lwt: switch(lwt)
	| `std.None:
	;;
}

const done = {
	switch(sched.reaper)
}

const reap = {
	for ; ;
		match pop()
		| `std.Some lwt: free(lwt)
		| `std.None: std.die("how\n")
		;;
		match shift()
		| `std.Some lwt: swap(sched.reaper, (sched.curr = lwt))
		| `std.None: std.exit(0)
		;;
	;;
}

const push = {task
	match sched.queue
	| Zptr:
		task.prev = task
		sched.queue = task
	| q:
		task.prev = q.prev
		q.prev.next = task
		q.prev = task
	;;
}

const pop = {
	if sched.queue == Zptr
		-> `std.None
	;;

	var t = sched.queue.prev
	if t.prev == t
		sched.queue = Zptr
	else
		sched.queue.prev = t.prev
		t.prev.next = Zptr
	;;
	-> `std.Some t.lwt
}

const shift = {
	if sched.queue == Zptr
		-> `std.None
	;;

	var t = sched.queue
	if t.next != Zptr
		t.next.prev = t.prev
	;;
	sched.queue = t.next
	-> `std.Some t.lwt
}
